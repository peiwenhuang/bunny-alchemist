/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Marbles studio (https://sketchfab.com/marblesstudio)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/stylized-plant-pack-d866603021fa4939b8e7bc28f22bb47c
Title: Stylized Plant Pack
*/

import React, { useRef, useEffect } from "react";
import { useFrame } from "@react-three/fiber";
import { useGLTF } from "@react-three/drei";
import gsap from "gsap";

import plantPath from "../../assets/garden/stylized_plant_pack.glb";
import { click } from "@testing-library/user-event/dist/click";

export function Plant({ clickable, setClickable, type, handleSetDialogScene, position = [0, 0, 0], scale = 1.2 }) {
    const ref = useRef();
    const { nodes, materials } = useGLTF(plantPath);

    const tl = new gsap.timeline({
        defaults: {duration: 0.6, delay: 0.01} 
    });

    const handleHoverIn = () => {
        if(clickable) {
            tl.to(ref.current.scale, {
                x: ref.current.scale.x * 1.1,
                y: ref.current.scale.y * 1.1,
                z: ref.current.scale.z * 1.1,
            });
        }
    };

    const handleHoverOut = () => {
        if(clickable) {
            tl.to(ref.current.scale, {
                x: ref.current.scale.x / 1.1,
                y: ref.current.scale.y / 1.1,
                z: ref.current.scale.z / 1.1,
            });
        }
    };

    const handleClick = () => {
        if(clickable) {
            setClickable(false);
            handleSetDialogScene();
            // tl.to(ref.current.scale, {
            //     x: ref.current.scale.x / 1.1,
            //     y: ref.current.scale.y / 1.1,
            //     z: ref.current.scale.z / 1.1,
            // });
        }
    };

//   useFrame((state, delta) => {
//     ref.current.rotation.x -= delta;
//   });

    if(type === "chamomile") {
        return (
            <group position={position} scale={scale} ref={ref} rotation={[- Math.PI / 2, Math.PI / 6, 0]} dispose={null}>
                <group>
                    <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.Object_5.geometry}
                    material={materials.White_Flower}
                    onClick={handleSetDialogScene}
                    onPointerEnter={handleHoverIn}
                    onPointerLeave={handleHoverOut}
                    />
                </group>
            </group>
        );
    }
    if(type === "evening-primrose") {
        return (
            <group position={position} scale={scale} ref={ref} rotation={[- Math.PI / 2, 0, 0]} dispose={null}>
                <group>
                    <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.Object_6.geometry}
                    material={materials.Yellow_Flower}
                    onClick={handleSetDialogScene}
                    onPointerEnter={handleHoverIn}
                    onPointerLeave={handleHoverOut}
                    />
                </group>
            </group>
        );
    }
    if(type === "rose") {
        return (
            <group position={position} scale={scale} ref={ref} rotation={[- Math.PI / 2, 0, 0]} dispose={null}>
                <group>
                    <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.Object_2.geometry}
                    material={materials.Rose}
                    onClick={handleSetDialogScene}
                    onPointerEnter={handleHoverIn}
                    onPointerLeave={handleHoverOut}
                    />
                </group>
            </group>
        );
    }
}

useGLTF.preload(plantPath);